##

## 修改服务器的本地时间和时区，docker启动的时候设置进去
echo "Asia/shanghai" > /etc/timezone
cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

删除timezone
rm -rf /etc/timezone

## rabbit mq 增加 delay message queue
插件下载地址： https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9
拷贝插件到容器： docker cp
rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez gtc_cloud_mq:/plugins
rabbitmq_delayed_message_exchange-3.8.17.8f537ac.ez gtc_cloud_mq:/plugins

进入容器启动插件： rabbitmq-plugins enable rabbitmq_delayed_message_exchange
查看插件是否已加载: rabbitmq-plugins list


## docker mysql backup
docker exec -it gtc_cloud_db mysqldump -uroot -pgtc_cloud@123456 gtc-social-db > /root/docker/mysql_backup/gtc-social-db_20210125.sql
docker exec -it gtc_cloud_db mysqldump -uroot -pgtc_cloud@123456 gtc-auth-db > /root/docker/mysql_backup/gtc-auth-db_20210305.sql


## docker origin:

############################## mysql
sudo docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=gtc_cloud@123456 --name gtc_cloud_db -d mysql:5.7

docker exec gtc_cloud_db bash -c "echo 'log-bin=/var/lib/mysql/mysql-bin' >> /etc/mysql/mysql.conf.d/mysqld.cnf"
docker exec gtc_cloud_db bash -c “echo ‘server-id=99’ >> /etc/mysql/mysql.conf.d/mysqld.cnf”

# 开启 bin log
docker exec -it gtc_cloud_db /bin/bash

vim /etc/mysql/mysql.conf.d/mysqld.cnf
[mysqld]
log-bin=mysql-bin
server-id=99
binlog_format=ROW

# 查看是否已开启
show variables like 'log_%';

# 修改数据包
vim /etc/mysql/mysql.conf.d/mysqld.cnf

[mysqld]
max_allowed_packet = 20M

# 查看数据包修改后大小
show VARIABLES like '%max_allowed_packet%';

############################## rabbit
sudo docker run -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=root -e RABBITMQ_DEFAULT_PASS=gtc_cloud@123456 --name gtc_cloud_mq -d rabbitmq:management

sudo docker run -p 15672:15672 -p 5672:5672  --name gtc_cloud_mq -d rabbitmq:management

sudo docker run -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=root -e RABBITMQ_DEFAULT_PASS=gtc_cloud@123456 --name gtc_cloud_mq -d rabbitmq:3.8.9-management


############################## minio
sudo docker run -p 9000:9000 -e MINIO_ACCESS_KEY=root -e MINIO_SECRET_KEY=gtc_cloud@123456 --name gtc_cloud_file -d minio/minio server /data

############################## redis
sudo docker run -p 6379:6379 --name gtc_cloud_cache --privileged=true -d redis --requirepass "gtc_cloud@123456"

############################## hbase
sudo docker run -p 2181:2181 -p 8080:8080 -p 8085:8085 -p 9090:9090 -p 9095:9095 -p 16000:16000 -p 16010:16010 -p 16020:16020 -p 16030:16030 -p 16201:16201 -p 16301:16301 --name gtc_cloud_nosql -d harisekhon/hbase

############################## es single

# 创建一个网络
docker network create -d bridge es-network

# 启动
sudo docker run -p 9200:9200 --network=es-network -e "discovery.type=single-node" -e "ES_JAVA_OPTS=-Xms512m -Xmx512m" --name gtc_cloud_es -d docker.elastic.co/elasticsearch/elasticsearch:7.12.0

# 更新配置，增加密码
docker cp gtc_cloud_es:/usr/share/elasticsearch/config/elasticsearch.yml .

vim elasticsearch.yml 添加下面两行:
xpack.security.enabled: true
discovery.type: single-node

docker cp ./elasticsearch.yml gtc_cloud_es:/usr/share/elasticsearch/config/elasticsearch.yml
docker restart gtc_cloud_es

# 进入容器设置密码
docker exec -it gtc_cloud_es /bin/bash
./bin/elasticsearch-setup-passwords interactive

############################## kibana
docker run -p 5601:5601 --network=es-network --name gtc_cloud_kibana -d docker.elastic.co/kibana/kibana:7.12.0

# 更新配置
docker cp gtc_cloud_kibana:/usr/share/kibana/config/kibana.yml .

vim kibana.yml
修改：
elasticsearch.hosts: [ "http://gtc_cloud_es:9200" ]
新增：
elasticsearch.username: "elastic"
elasticsearch.password: "gtc_cloud@123456"
i18n.locale: "zh-CN"

docker cp ./kibana.yml gtc_cloud_kibana:/usr/share/kibana/config/kibana.yml
docker restart gtc_cloud_kibana

############################## zipkin101.34.163.168
sudo docker run -p 9411:9411 --name gtc_cloud_zipkin -e STORAGE_TYPE=elasticsearch -e ES_HOSTS=http://101.34.163.168:9200 -e ES_USERNAME=elastic -e ES_PASSWORD=gtc_cloud@123456 -d openzipkin/zipkin

############################## logstash
sudo docker run -it -p 5044:5044 -p 5045:5045 --name gtc_cloud_logstash --network=es-network -d docker.elastic.co/logstash/logstash:7.12.0

# 修改管道配置input为tcp模式
docker cp gtc_cloud_logstash:/usr/share/logstash/pipeline/logstash.conf .
vi logstash.conf

input {
  tcp {
    port => 5044
    codec => json_lines
  }
}

output {
  elasticsearch {
    # 这里这用容器名称会报错，暂时使用ip，通过 docker inspect gtc_cloud_es 查看 es 的ip，这样的问题是es重启后ip可能会变，这里也要跟着变
    #hosts => ["http://gtc_cloud_es:9200"]
    hosts => ["http://192.168.224.2:9200"]
    index => "gtc-cloud-log-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "gtc_cloud@123456"
  }
}

docker cp logstash.conf gtc_cloud_logstash:/usr/share/logstash/pipeline/logstash.conf

# 修改 logstash.yml
docker cp gtc_cloud_logstash:/usr/share/logstash/config/logstash.yml .

vim logstash.yml
http.host: "0.0.0.0"
#xpack.monitoring.elasticsearch.hosts: [ "http://gtc_cloud_es:9200" ]
#xpack.monitoring.enabled: true
#xpack.monitoring.elasticsearch.username: elastic
#xpack.monitoring.elasticsearch.password: gtc_cloud@123456

docker cp logstash.yml gtc_cloud_logstash:/usr/share/logstash/config/logstash.yml

重启容器 docker restart gtc_cloud_logstash

############################## 服务
sudo docker run -p 8001:8001 --name gtc_registry -d registry
sudo docker run -p 8002:8002 --name gtc_auth -v /etc/localtime:/etc/localtime:ro -v /etc/timezone/timezone:/etc/timezone:ro -v /root/docker/logs/auth/:/ROOT/logs/ -d auth
sudo docker run -p 8003:8003 --name gtc_social -v /etc/localtime:/etc/localtime:ro -v /etc/timezone/timezone:/etc/timezone:ro -v /root/docker/logs/social/:/ROOT/logs/ -d social
sudo docker run -p 8005:8005 --name gtc_push -v /etc/localtime:/etc/localtime:ro -v /etc/timezone/timezone:/etc/timezone:ro -v /root/docker/logs/push/:/ROOT/logs/ -d push
sudo docker run -p 8088:8088 --name gtc_gateway -v /etc/localtime:/etc/localtime:ro -v /etc/timezone/timezone:/etc/timezone:ro -d gateway
sudo docker run -p 8089:8089 --name gtc_monitor -d monitor

sudo docker run -p 8080:8080 --name gtc_pay -v /etc/localtime:/etc/localtime:ro -v /etc/timezone/timezone:/etc/timezone:ro -v /root/docker/logs/pay/:/root/logs/pay/ -d pay
sudo docker run -p 8006:8006 --name gtc_passport -v /etc/localtime:/etc/localtime:ro -v /etc/timezone/timezone:/etc/timezone:ro -v /root/docker/logs/pay/:/root/logs/pay/ -d passport

# php
sudo docker run -p 9000:9000 --name gtc_website -v /root/docker/php-website/hangzhouYY:/www:rw --privileged=true -d php:5.6-fpm
# 如果需要mysql 支持，进入容易执行并重启
docker-php-ext-install pdo_mysql

# portainer docker监控
sudo docker run -p 19000:9000 -p 18000:8000 --name gtc_portainer -v /var/run/docker.sock:/var/run/docker.sock -d portainer/portainer

## docker compose

## k8s

## 查询容器ip
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' gtc_website

1安装镜像
docker pull nginx
2. 创建并启动nginx容器

3修改配置文件
4重启

