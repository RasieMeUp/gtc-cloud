spring.profiles.active=test

spring.profiles.include=base

spring.application.name=social

server.port=8003

#eureka client config
eureka.client.service-url.defaultZone = http://localhost:8001/eureka/

#datasource settings
spring.datasource.url=jdbc:mysql://localhost:3306/gtc-social-db?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.username=root
spring.datasource.password=gtc_cloud@123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# hikari pool
#spring.datasource.hikari.maximum-pool-size=10
#spring.datasource.hikari.minimum-idle=2
#spring.datasource.hikari.idle-timeout=600000
#spring.datasource.hikari.connection-timeout=30000
#spring.datasource.hikari.max-lifetime=1800000

#jpa settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#security config

security.oauth2.resource.prefer-token-info=true
security.oauth2.resource.jwt.key-uri=http://localhost:8002/auth/oauth/token_key
security.oauth2.resource.jwt.key-value=jwt-key

security.oauth2.client.client-id=test-client
security.oauth2.client.client-secret=test-client-secret
security.oauth2.client.access-token-uri=http://localhost:8002/auth/oauth/token
security.oauth2.client.user-authorization-uri=http://localhost:8002/auth/oauth/authorize
security.oauth2.authorization.check-token-access=http://localhost:8002/auth/oauth/check_token

# scs rabbitmq 配置
spring.rabbitmq.addresses=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=root
spring.rabbitmq.password=gtc_cloud@123456

# 消息发送确认
spring.rabbitmq.publisher-confirm-type=correlated
# 消息入队列确认
spring.rabbitmq.template.mandatory=true
spring.rabbitmq.publisher-returns=true
# 手动确认
spring.rabbitmq.listener.simple.acknowledge-mode=manual
spring.rabbitmq.listener.direct.acknowledge-mode=manual
#
fpp.rabbitmq.ext.bindings.test-topic.exchange-name = test-topic-exchange
fpp.rabbitmq.ext.bindings.test-topic.exchange-type = topic
fpp.rabbitmq.ext.bindings.test-topic.routing-key = test1.test2
fpp.rabbitmq.ext.bindings.test-topic.queue.name = test-queue-1
fpp.rabbitmq.ext.bindings.test-topic.queue.arguments.msg-ttl = 1800000
fpp.rabbitmq.ext.bindings.test-topic.queue.arguments.dlx-exchange=test-topic-exchange-dlx
fpp.rabbitmq.ext.bindings.test-topic.queue..arguments.dlx-routing-key = test1.test2

# scs 生产者配置 配置exchange的类型和名称，group的配置由消费者配置
# 保证生产者和消费者一致
spring.cloud.stream.bindings.follow-notice-channel.destination=follow-notice-exchange
# 设定 exchange type: fanout,direct,topic,headers
spring.cloud.stream.rabbit.bindings.follow-notice-channel.producer.exchange-type=topic
spring.cloud.stream.bindings.follow-notice-channel.producer.error-channel-enabled=true

# scs 分区
#spring.cloud.stream.bindings.follow-notice-channel.producer.partition-count=2
#spring.cloud.stream.bindings.follow-notice-channel.producer.partition-key-expression=1

##### 主播骚扰功能延迟队列配置
# output
spring.cloud.stream.bindings.greet-delayed-queue-output.destination=greet-delayed-queue-exchange
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-output.producer.exchange-type=topic
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-output.producer.delayed-exchange=true

# input
spring.cloud.stream.bindings.greet-delayed-queue-input.destination=greet-delayed-queue-exchange
spring.cloud.stream.bindings.greet-delayed-queue-input.group=greet-delayed-queue
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.delayed-exchange=true

# 并发数
spring.cloud.stream.bindings.greet-delayed-queue-input.consumer.concurrency=1
# 重试次数
spring.cloud.stream.bindings.greet-delayed-queue-input.consumer.max-attempts=1
# 最大并发
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.max-concurrency=1
# 重回队列
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.requeue-rejected=true
# 每次取一条消息
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.prefetch=1
# 是否支持签收 模式: NONE,AUTO,MANUAL
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.acknowledge-mode=MANUAL
# 重连
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.recovery-interval=3000
# 是否持久化订阅
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.durable-subscription=true
# ttl
#spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.ttl=10000
# 开启死信队列
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.republish-to-dlq=true

##### wx web hook 队列
# output
spring.cloud.stream.bindings.wx-web-hook-queue-output.destination=wx-web-hook-queue-exchange
spring.cloud.stream.rabbit.bindings.wx-web-hook-queue-output.producer.exchange-type=topic

# input
spring.cloud.stream.bindings.wx-web-hook-queue-input.destination=wx-web-hook-queue-exchange
spring.cloud.stream.bindings.wx-web-hook-queue-input.group=wx-web-hook-queue

#### 通话计时 延迟队列
# output
spring.cloud.stream.bindings.call-calc-output.destination=call-calc-exchange
spring.cloud.stream.rabbit.bindings.call-calc-output.producer.exchange-type=direct

# input
spring.cloud.stream.bindings.call-calc-input.destination=call-calc-exchange
spring.cloud.stream.bindings.call-calc-input.group=call-calc-queue
spring.cloud.stream.bindings.call-calc-input.consumer.concurrency=4
spring.cloud.stream.rabbit.bindings.call-calc-input.consumer.max-concurrency=8
spring.cloud.stream.rabbit.bindings.call-calc-input.consumer.prefetch=10
spring.cloud.stream.rabbit.bindings.call-calc-input.consumer.acknowledge-mode=MANUAL
spring.cloud.stream.rabbit.bindings.call-calc-input.consumer.delayed-exchange=true
spring.cloud.stream.rabbit.bindings.call-calc-input.consumer.auto-bind-dlq=true

###########

## redis
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.lettuce.pool.max-wait=100000
spring.redis.lettuce.pool.min-idle=10
spring.redis.lettuce.pool.max-active=100
spring.redis.timeout=5000

# quartz
spring.quartz.job-store-type=jdbc
spring.quartz.jdbc.initialize-schema=never
spring.quartz.overwrite-existing-jobs=false
spring.quartz.wait-for-jobs-to-complete-on-shutdown=true

spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
spring.quartz.properties.org.quartz.scheduler.instanceName=gtc-quartz

spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
spring.quartz.properties.org.quartz.jobStore.useProperties=false
spring.quartz.properties.org.quartz.jobStore.misfireThreshold=60000
#spring.quartz.properties.org.quartz.jobStore.dataSource=gtc-quartz-db
#spring.quartz.properties.org.quartz.jobStore.tablePrefix=gtc_
spring.quartz.properties.org.quartz.jobStore.isClustered=true
spring.quartz.properties.org.quartz.jobStore.clusterCheckinInterval=5000

spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
spring.quartz.properties.org.quartz.threadPool.threadCount=50

spring.quartz.isolate=true
spring.quartz.datasource.url=jdbc:mysql://42.192.212.67:3306/gtc-quartz-db?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.quartz.datasource.username=root
spring.quartz.datasource.password=gtc_cloud@123456
spring.quartz.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# minio
fpp.minio.ext.url=http://42.192.212.67:9000
fpp.minio.ext.access-key=root
fpp.minio.ext.secret-key=gtc_cloud@123456

spring.main.allow-bean-definition-overriding=true

# upload file
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

# feign
logging.level.com.fmisser.gtc.social.feign.*=debug

# log
logging.file.path=logs
logging.file.name=${logging.file.path}/${spring.application.name}.log
