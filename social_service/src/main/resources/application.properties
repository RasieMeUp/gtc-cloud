spring.profiles.active=base,local

spring.application.name=social

server.port=8003

#eureka client config
eureka.client.service-url.defaultZone = http://localhost:8001/eureka/

#datasource settings
spring.datasource.url=jdbc:mysql://localhost:3306/gtc-social-db?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.username=root
spring.datasource.password=gtc_cloud@123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#jpa settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#security config

security.oauth2.resource.prefer-token-info=true
security.oauth2.resource.jwt.key-uri=http://localhost:8002/auth/oauth/token_key
security.oauth2.resource.jwt.key-value=jwt-key

security.oauth2.client.client-id=test-client
security.oauth2.client.client-secret=test-client-secret
security.oauth2.client.access-token-uri=http://localhost:8002/auth/oauth/token

security.oauth2.authorization.check-token-access=http://localhost:8002/auth/oauth/check_token

# scs rabbitmq 配置
spring.rabbitmq.addresses=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=root
spring.rabbitmq.password=gtc_cloud@123456

spring.rabbitmq.template.mandatory=true
# 消息发送确认
spring.rabbitmq.publisher-confirm-type=correlated
# 消息入队列确认
spring.rabbitmq.publisher-returns=true

# scs 生产者配置 配置exchange的类型和名称，group的配置由消费者配置
# 保证生产者和消费者一致
spring.cloud.stream.bindings.follow-notice-channel.destination=follow-notice-exchange
# 设定 exchange type: fanout,direct,topic,headers
spring.cloud.stream.rabbit.bindings.follow-notice-channel.producer.exchange-type=topic

# scs 分区
#spring.cloud.stream.bindings.follow-notice-channel.producer.partition-count=2
#spring.cloud.stream.bindings.follow-notice-channel.producer.partition-key-expression=1

##### 主播骚扰功能延迟队列配置
# output
spring.cloud.stream.bindings.greet-delayed-queue-output.destination=greet-delayed-queue-exchange
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-output.producer.exchange-type=topic
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-output.producer.delayed-exchange=true

# input
spring.cloud.stream.bindings.greet-delayed-queue-input.destination=greet-delayed-queue-exchange
spring.cloud.stream.bindings.greet-delayed-queue-input.group=greet-delayed-queue
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.delayed-exchange=true

# 并发数
spring.cloud.stream.bindings.greet-delayed-queue-input.consumer.concurrency=1
# 最大并发
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.max-concurrency=1
# 重试次数
spring.cloud.stream.bindings.greet-delayed-queue-input.consumer.max-attempts=1
# 重回队列
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.requeue-rejected=true
# 每次取一条消息
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.prefetch=1
# 是否支持签收 模式: NONE,AUTO,MANUAL
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.acknowledge-mode=MANUAL
# 重连
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.recovery-interval=3000
# 是否持久化订阅
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.durable-subscription=true
# ttl
#spring.cloud.stream.rabbit.bindings.follow-notice-channel.consumer.ttl=10000
# 开启死信队列
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.greet-delayed-queue-input.consumer.republish-to-dlq=true

###########

spring.main.allow-bean-definition-overriding=true

spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

logging.level.com.fmisser.gtc.social.feign.*=debug
